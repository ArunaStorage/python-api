# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from aruna.api.storage.services.v2 import data_replication_service_pb2 as aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2


class DataReplicationServiceStub(object):
    """DataReplicationService

    Endpoint specific methods for syncing data
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReplicateProjectData = channel.unary_unary(
                '/aruna.api.storage.services.v2.DataReplicationService/ReplicateProjectData',
                request_serializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.ReplicateProjectDataRequest.SerializeToString,
                response_deserializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.ReplicateProjectDataResponse.FromString,
                )
        self.PartialReplicateData = channel.unary_unary(
                '/aruna.api.storage.services.v2.DataReplicationService/PartialReplicateData',
                request_serializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.PartialReplicateDataRequest.SerializeToString,
                response_deserializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.PartialReplicateDataResponse.FromString,
                )
        self.UpdateReplicationStatus = channel.unary_unary(
                '/aruna.api.storage.services.v2.DataReplicationService/UpdateReplicationStatus',
                request_serializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.UpdateReplicationStatusRequest.SerializeToString,
                response_deserializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.UpdateReplicationStatusResponse.FromString,
                )
        self.GetReplicationStatus = channel.unary_unary(
                '/aruna.api.storage.services.v2.DataReplicationService/GetReplicationStatus',
                request_serializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.GetReplicationStatusRequest.SerializeToString,
                response_deserializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.GetReplicationStatusResponse.FromString,
                )
        self.DeleteReplication = channel.unary_unary(
                '/aruna.api.storage.services.v2.DataReplicationService/DeleteReplication',
                request_serializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.DeleteReplicationRequest.SerializeToString,
                response_deserializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.DeleteReplicationResponse.FromString,
                )


class DataReplicationServiceServicer(object):
    """DataReplicationService

    Endpoint specific methods for syncing data
    """

    def ReplicateProjectData(self, request, context):
        """ReplicateProjectData

        Status: ALPHA

        Replicates the (full) project data from one endpoint to another
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PartialReplicateData(self, request, context):
        """PartialReplicateData

        Status: ALPHA

        Partial replicate data between endpoints
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateReplicationStatus(self, request, context):
        """UpdateReplicationStatus

        Status: ALPHA

        Update the replication status of a project
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetReplicationStatus(self, request, context):
        """GetReplicationStatus

        Status: ALPHA

        Get the replication status of a project
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteReplication(self, request, context):
        """DeleteReplication

        Status: ALPHA

        Delete the replication status of a project
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataReplicationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReplicateProjectData': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicateProjectData,
                    request_deserializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.ReplicateProjectDataRequest.FromString,
                    response_serializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.ReplicateProjectDataResponse.SerializeToString,
            ),
            'PartialReplicateData': grpc.unary_unary_rpc_method_handler(
                    servicer.PartialReplicateData,
                    request_deserializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.PartialReplicateDataRequest.FromString,
                    response_serializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.PartialReplicateDataResponse.SerializeToString,
            ),
            'UpdateReplicationStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateReplicationStatus,
                    request_deserializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.UpdateReplicationStatusRequest.FromString,
                    response_serializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.UpdateReplicationStatusResponse.SerializeToString,
            ),
            'GetReplicationStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetReplicationStatus,
                    request_deserializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.GetReplicationStatusRequest.FromString,
                    response_serializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.GetReplicationStatusResponse.SerializeToString,
            ),
            'DeleteReplication': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteReplication,
                    request_deserializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.DeleteReplicationRequest.FromString,
                    response_serializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.DeleteReplicationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aruna.api.storage.services.v2.DataReplicationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataReplicationService(object):
    """DataReplicationService

    Endpoint specific methods for syncing data
    """

    @staticmethod
    def ReplicateProjectData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aruna.api.storage.services.v2.DataReplicationService/ReplicateProjectData',
            aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.ReplicateProjectDataRequest.SerializeToString,
            aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.ReplicateProjectDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PartialReplicateData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aruna.api.storage.services.v2.DataReplicationService/PartialReplicateData',
            aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.PartialReplicateDataRequest.SerializeToString,
            aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.PartialReplicateDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateReplicationStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aruna.api.storage.services.v2.DataReplicationService/UpdateReplicationStatus',
            aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.UpdateReplicationStatusRequest.SerializeToString,
            aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.UpdateReplicationStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetReplicationStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aruna.api.storage.services.v2.DataReplicationService/GetReplicationStatus',
            aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.GetReplicationStatusRequest.SerializeToString,
            aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.GetReplicationStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteReplication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aruna.api.storage.services.v2.DataReplicationService/DeleteReplication',
            aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.DeleteReplicationRequest.SerializeToString,
            aruna_dot_api_dot_storage_dot_services_dot_v2_dot_data__replication__service__pb2.DeleteReplicationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
