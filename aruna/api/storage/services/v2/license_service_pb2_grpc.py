# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from aruna.api.storage.services.v2 import license_service_pb2 as aruna_dot_api_dot_storage_dot_services_dot_v2_dot_license__service__pb2


class LicenseServiceStub(object):
    """LicenseService

    Contains all methods to add, get or list licenses
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateLicense = channel.unary_unary(
                '/aruna.api.storage.services.v2.LicenseService/CreateLicense',
                request_serializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_license__service__pb2.CreateLicenseRequest.SerializeToString,
                response_deserializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_license__service__pb2.CreateLicenseResponse.FromString,
                )
        self.GetLicense = channel.unary_unary(
                '/aruna.api.storage.services.v2.LicenseService/GetLicense',
                request_serializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_license__service__pb2.GetLicenseRequest.SerializeToString,
                response_deserializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_license__service__pb2.GetLicenseResponse.FromString,
                )
        self.ListLicenses = channel.unary_unary(
                '/aruna.api.storage.services.v2.LicenseService/ListLicenses',
                request_serializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_license__service__pb2.ListLicensesRequest.SerializeToString,
                response_deserializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_license__service__pb2.ListLicensesResponse.FromString,
                )


class LicenseServiceServicer(object):
    """LicenseService

    Contains all methods to add, get or list licenses
    """

    def CreateLicense(self, request, context):
        """CreateLicense

        Status: BETA

        This creates a new license
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLicense(self, request, context):
        """GetLicense

        Status: BETA

        This returns the license for a given tag
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListLicenses(self, request, context):
        """ListLicenses

        Status: BETA

        This returns a list of all licenses
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LicenseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateLicense': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateLicense,
                    request_deserializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_license__service__pb2.CreateLicenseRequest.FromString,
                    response_serializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_license__service__pb2.CreateLicenseResponse.SerializeToString,
            ),
            'GetLicense': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLicense,
                    request_deserializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_license__service__pb2.GetLicenseRequest.FromString,
                    response_serializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_license__service__pb2.GetLicenseResponse.SerializeToString,
            ),
            'ListLicenses': grpc.unary_unary_rpc_method_handler(
                    servicer.ListLicenses,
                    request_deserializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_license__service__pb2.ListLicensesRequest.FromString,
                    response_serializer=aruna_dot_api_dot_storage_dot_services_dot_v2_dot_license__service__pb2.ListLicensesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aruna.api.storage.services.v2.LicenseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LicenseService(object):
    """LicenseService

    Contains all methods to add, get or list licenses
    """

    @staticmethod
    def CreateLicense(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aruna.api.storage.services.v2.LicenseService/CreateLicense',
            aruna_dot_api_dot_storage_dot_services_dot_v2_dot_license__service__pb2.CreateLicenseRequest.SerializeToString,
            aruna_dot_api_dot_storage_dot_services_dot_v2_dot_license__service__pb2.CreateLicenseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLicense(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aruna.api.storage.services.v2.LicenseService/GetLicense',
            aruna_dot_api_dot_storage_dot_services_dot_v2_dot_license__service__pb2.GetLicenseRequest.SerializeToString,
            aruna_dot_api_dot_storage_dot_services_dot_v2_dot_license__service__pb2.GetLicenseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListLicenses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aruna.api.storage.services.v2.LicenseService/ListLicenses',
            aruna_dot_api_dot_storage_dot_services_dot_v2_dot_license__service__pb2.ListLicensesRequest.SerializeToString,
            aruna_dot_api_dot_storage_dot_services_dot_v2_dot_license__service__pb2.ListLicensesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
