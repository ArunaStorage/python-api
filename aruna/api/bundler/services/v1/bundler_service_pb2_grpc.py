# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from aruna.api.bundler.services.v1 import bundler_service_pb2 as aruna_dot_api_dot_bundler_dot_services_dot_v1_dot_bundler__service__pb2


class BundlerServiceStub(object):
    """BundlerService

    Status: ALPHA

    A service that enables bundled downloads
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateBundle = channel.unary_unary(
                '/aruna.api.bundler.services.v1.BundlerService/CreateBundle',
                request_serializer=aruna_dot_api_dot_bundler_dot_services_dot_v1_dot_bundler__service__pb2.CreateBundleRequest.SerializeToString,
                response_deserializer=aruna_dot_api_dot_bundler_dot_services_dot_v1_dot_bundler__service__pb2.CreateBundleResponse.FromString,
                )
        self.DeleteBundle = channel.unary_unary(
                '/aruna.api.bundler.services.v1.BundlerService/DeleteBundle',
                request_serializer=aruna_dot_api_dot_bundler_dot_services_dot_v1_dot_bundler__service__pb2.DeleteBundleRequest.SerializeToString,
                response_deserializer=aruna_dot_api_dot_bundler_dot_services_dot_v1_dot_bundler__service__pb2.DeleteBundleResponse.FromString,
                )


class BundlerServiceServicer(object):
    """BundlerService

    Status: ALPHA

    A service that enables bundled downloads
    """

    def CreateBundle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteBundle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BundlerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateBundle': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBundle,
                    request_deserializer=aruna_dot_api_dot_bundler_dot_services_dot_v1_dot_bundler__service__pb2.CreateBundleRequest.FromString,
                    response_serializer=aruna_dot_api_dot_bundler_dot_services_dot_v1_dot_bundler__service__pb2.CreateBundleResponse.SerializeToString,
            ),
            'DeleteBundle': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteBundle,
                    request_deserializer=aruna_dot_api_dot_bundler_dot_services_dot_v1_dot_bundler__service__pb2.DeleteBundleRequest.FromString,
                    response_serializer=aruna_dot_api_dot_bundler_dot_services_dot_v1_dot_bundler__service__pb2.DeleteBundleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aruna.api.bundler.services.v1.BundlerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BundlerService(object):
    """BundlerService

    Status: ALPHA

    A service that enables bundled downloads
    """

    @staticmethod
    def CreateBundle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aruna.api.bundler.services.v1.BundlerService/CreateBundle',
            aruna_dot_api_dot_bundler_dot_services_dot_v1_dot_bundler__service__pb2.CreateBundleRequest.SerializeToString,
            aruna_dot_api_dot_bundler_dot_services_dot_v1_dot_bundler__service__pb2.CreateBundleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteBundle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aruna.api.bundler.services.v1.BundlerService/DeleteBundle',
            aruna_dot_api_dot_bundler_dot_services_dot_v1_dot_bundler__service__pb2.DeleteBundleRequest.SerializeToString,
            aruna_dot_api_dot_bundler_dot_services_dot_v1_dot_bundler__service__pb2.DeleteBundleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
